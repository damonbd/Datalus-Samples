using Sabio.Data;
using Sabio.Web.Domain;
using Sabio.Web.Models;
using Sabio.Web.Models.Requests;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using System.Web;

namespace Sabio.Web.Services
{
    public class AspNetUserRolesService : BaseService
    {
        public static void Insert(AspNetUserRolesToggleRequest model)
        {
            DataProvider.ExecuteNonQuery(GetConnection, "dbo.AspNetUserRoles_InsertWithRoleName"
               , inputParamMapper: delegate (SqlParameterCollection paramCollection)
               {
                   paramCollection.AddWithValue("@UserId", model.Id);
                   paramCollection.AddWithValue("@RoleName", model.RoleName);
               }
            );
        }

        public static List<AspNetUserRoles> GetAll()
        {
            List<AspNetUserRoles> aspNetUsersList = null;

            DataProvider.ExecuteCmd(GetConnection, "dbo.AspNetUserRoles_GroupByUser"
               , inputParamMapper: null
               , map: delegate (IDataReader reader, short resultSetNumber)
               {
                   AspNetUserRoles aspNetUsers = MapAspNetUserRoles(reader);

                   if (aspNetUsersList == null)
                   {
                       aspNetUsersList = new List<AspNetUserRoles>();
                   }     
                   aspNetUsersList.Add(aspNetUsers);
               }
            );
            return aspNetUsersList;
        }

        public AspNetUserRoles GetOwnerTypeId(string guid)
        {
            AspNetUserRoles model = null;

            DataProvider.ExecuteCmd(GetConnection, "dbo.AspNetUserRoles_GetOwnerTypeId"
               , inputParamMapper: delegate(SqlParameterCollection paramCollection)
               {
                   paramCollection.AddWithValue("@id", guid);
               }
                   , map: delegate(IDataReader reader, short resultSetNumber)
                   {
                       if (resultSetNumber == 0)
                       {
                           model = MapAspNetUserRoles(reader);
                       }                 
                   });
            return model;
        }


        public static void Delete(AspNetUserRolesToggleRequest model)
        {
            DataProvider.ExecuteNonQuery(GetConnection, "dbo.AspNetUserRoles_Delete"
               , inputParamMapper: delegate (SqlParameterCollection paramCollection)
               {
                   paramCollection.AddWithValue("@UserId", model.Id);
                   paramCollection.AddWithValue("@RoleName", model.RoleName);
               }, returnParameters: null
            );
        }

        private static AspNetUserRoles MapAspNetUserRoles(IDataReader reader)
        {
            AspNetUserRoles aspNetUsersRoles = new AspNetUserRoles();
            int startingIndex = 0;

            aspNetUsersRoles.Id = reader.GetSafeString(startingIndex++);
            aspNetUsersRoles.UserName = reader.GetSafeString(startingIndex++);
            aspNetUsersRoles.Email = reader.GetSafeString(startingIndex++);
            aspNetUsersRoles.Student = reader.GetSafeBool(startingIndex++);
            aspNetUsersRoles.Instructor = reader.GetSafeBool(startingIndex++);
            aspNetUsersRoles.Admin = reader.GetSafeBool(startingIndex++);
            aspNetUsersRoles.SuperAdmin = reader.GetSafeBool(startingIndex++);

            return aspNetUsersRoles;
        }
    }
}
