@model Datalus.Web.Models.ViewModels.BaseViewModel

@{
    ViewBag.Title = "Index";
}

<h2>Index</h2>

<div class="content" data-ng-controller="adminController as dashboard" id="adminCtrler" data-ng-cloak>
    <div class="content-body">
        <div class="panel fade in panel-default panel-fill" data-fill-color="true" data-init-panel="true">
            <div class="panel-heading">
                <div class="panel-control pull-right">
                    <a href="#" class="btn btn-icon" data-toggle="panel-refresh" rel="tooltip" data-placement="bottom" title="" data-original-title="refresh" data-ng-click="dashboard.refresh()"><i class="icon-refresh"></i></a>
                    <a href="#" ng-if="!dashboard.items.expanded" ng-click="dashboard.items.expanded = true" class="btn btn-icon" data-toggle="panel-collapse" rel="tooltip" data-placement="bottom" title="" data-original-title="expand"><i class="icon_minus_alt2"></i></a>
                    <a href="#" ng-if="dashboard.items.expanded" ng-click="dashboard.items.expanded = false" class="btn btn-icon" data-toggle="panel-collapse" rel="tooltip" data-placement="bottom" title="" data-original-title="collapse"><i class="icon_plus_alt2"></i></a>

                </div>
                <h3 class="panel-title">AspNetUserRoles Table</h3>
            </div>

            <div class="panel-body">
                <div class="btn-toolbar row clearfix" role="toolbar">
                    <div class="btn-group">
                        <input id="filterAspNetUserTable" class="form-control input-sm" placeholder="Filter" data-ng-model="userName">

                    </div>

                    <div class="btn-group">
                        <div>
                            <label for="">
                                Show
                                <select ng-model="dashboard.numPerPage" ng-click="dashboard.refresh()">
                                    <option value="10" selected="selected">10</option>
                                    <option value="25">25</option>
                                    <option value="50">50</option>
                                    <option value="1000">1000</option>
                                </select>
                                Entries
                            </label>
                        </div>
                        <div class=pull-right mr-2x push">

                            <pagination ng-model="dashboard.currentPage"
                                        total-items="dashboard.items.length"
                                        max-size="maxSize"
                                        boundary-links="true"
                                        ng-click="dashboard.filtered(dashboard.items)"></pagination>
                        </div>
                    </div>
                </div>
            </div>

            <div id="AspNetUserTable_wrapper" class="dataTables_wrapper form-inline dt-bootstrap">

                <table id="AspNetUserTable" class="table table-noborder table-hover bordered-top dataTable" role="grid" aria-describedby="AspNetUserTable_info">
                    <thead>
                        <tr role="row">
                            <th class="sorting" tabindex="0" aria-controls="AspNetUserTable" rowspan="1" colspan="1" aria-label="Rendering engine: activate to sort column descending" aria-sort="ascending">Username</th>
                            <th class="sorting" tabindex="0" aria-controls="AspNetUserTable" rowspan="1" colspan="1" aria-label="Browser: activate to sort column ascending">Student</th>
                            <th class="sorting" tabindex="0" aria-controls="AspNetUserTable" rowspan="1" colspan="1" aria-label="Platform(s): activate to sort column ascending">Instructor</th>
                            <th class="sorting" tabindex="0" aria-controls="AspNetUserTable" rowspan="1" colspan="1" aria-label="Engine version: activate to sort column ascending">Admin</th>
                            <th class="sorting" tabindex="0" aria-controls="AspNetUserTable" rowspan="1" colspan="1" aria-label="CSS grade: activate to sort column ascending">Super Admin</th>
                        </tr>
                    </thead>

                    <tbody data-ng-repeat="item in dashboard.filteredItems | filter:userName">
                        <tr ng-if="!dashboard.items.expanded" ng-repeat-end="" role="row" data-id="AspNetUserTable">
                            <td>{{item.userName}}</td>
                            <td><input type="checkbox" data-ng-model="item.student" ng-click="dashboard.toggleCheckbox(item, 'student')" ng-true-value="true" ng-false-value="0" /></td>
                            <td><input type="checkbox" data-ng-model="item.instructor" ng-click="dashboard.toggleCheckbox(item, 'instructor')" /></td>
                            <td><input type="checkbox" data-ng-model="item.admin" ng-click="dashboard.toggleCheckbox(item, 'admin')" /></td>
                            <td><input type="checkbox" data-ng-model="item.superAdmin" ng-click="dashboard.toggleCheckbox(item, 'superAdmin')" /></td>
                        </tr>
                    </tbody>
                </table>
            </div>
            <div class="table-footer">
                <div class="pull-left">
                    <div class="dataTables_info" id="AspNetUserTable_info" role="status" aria-live="polite">There are {{dashboard.items.length}} entries</div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/Scripts/Datalus.Services.Admin.js"></script>
    <script src="/Wrapkit/scripts/moment.js"></script>
    <script type="text/javascript">

        (function () {
            "use strict";

            angular.module(APPNAME)
                .factory('$adminService', AdminServiceFactory);

            AdminServiceFactory.$inject = ['$baseService', '$datalus'];

            function AdminServiceFactory($baseService, $datalus) {

                var adminServiceObject = datalus.services.admin;
                var newService = $baseService.merge(true, {}, adminServiceObject, $baseService);

                return newService;
            }
        })();

        (function () {
            "use strict";

            angular.module(APPNAME)
                .controller('adminController', adminController);

            adminController.$inject = ['$scope', '$baseController', "$adminService"];

            function adminController(
                $scope
                , $baseController
                , $adminService
                , $filter) {

                var vm = this;
                vm.items = null;
                vm.item = null;

                vm.$adminService = $adminService;
                vm.$scope = $scope;

                vm.getAdminProfile = _getAdminProfile;
                vm.onError = _onError;
                //-- this line to simulate inheritance
                $baseController.merge(vm, $baseController);
                vm.notify = vm.$adminService.getNotifier($scope);
                vm.refresh = _refresh;
                vm.toggleCheckbox = _toggleCheckbox;
                vm.ajaxCheckSuccess = _ajaxCheckSuccess;
                vm.filteredItems = [];
                vm.currentPage = 1;
                vm.numPerPage = 10;
                vm.maxSize = 5;
                vm.filtered = _filtered;

                function numPages(items) {
                    return Math.ceil(items.length / vm.numPerPage);
                }

                render();

                function render() {
                    vm.$adminService.getAll(vm.getAdminProfile, vm.onError);
                }

                function _refresh() {
                    vm.$adminService.getAll(vm.getAdminProfile, vm.onError);
                }

                function _getAdminProfile(data) {
                    vm.notify(function () {
                        console.log(data.items);
                        vm.items = data.items;
                        _filtered(vm.items);
                        numPages(vm.items);
                    });
                }

                function _filtered(items) {
                    var begin = ((vm.currentPage - 1) * vm.numPerPage)
                    , end = begin + vm.numPerPage;
                    vm.filteredItems = items.slice(begin, end);
                    console.log(vm.filteredItems);
                };

                function _onError(jqXhr, error) {
                    console.error(error);
                }

                function _toggleCheckbox(item, RoleName) {
                    item.roleName = RoleName;
                    if (item[RoleName]) {
                        vm.$adminService.create(item, _ajaxCheckSuccess, _onError);
                        if (item[RoleName] = "Instructor") {
                            item.instructor = true;
                            item.instructorActive = true;
                            vm.$adminService.editInstructor(id, item, _ajaxCheckSuccess, _onError)
                        }
                    }
                    else {
                        vm.$adminService.delete(item, _ajaxDeleteSuccess, _onError);
                        if (item[RoleName] = "Instructor") {
                            item.instructor = true;
                            item.instructorActive = false;
                            vm.$adminService.editInstructor(id, item, _ajaxCheckSuccess, _onError)
                        }
                    }
                }

                function _ajaxCheckSuccess(data, status, xhr) {
                    vm.$alertService.info("Role Updated in Database");
                    vm.$adminService.getAll(vm.getAdminProfile, vm.onError);
                }

                function _ajaxDeleteSuccess(data, status, xhr) {
                    vm.$alertService.success("Role Deleted from Database");
                    vm.$adminService.getAll(vm.getAdminProfile, vm.onError);
                }
            }
        })();
    </script>
}
